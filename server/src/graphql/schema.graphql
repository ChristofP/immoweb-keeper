scalar Date

type Query {

    estates(
        immowebCode:        Int
        priceRange:         [Int]
        zipCodes:           [Int]
        onlyWithGarden:     Boolean
        minGardenArea:      Int
        minLivingArea:      Int
        onlyStillAvailable: Boolean
        freeText:           String
        minBedroomCount:    Int
        onlyLiked:          Boolean
        orderBy:            OrderByInput
    ): [Estate]

    estateByImmowebCode(
        immowebCode: Int
    ): Estate

    users: [User]

    userByName(
        name: String
    ): User
    
}

input OrderByInput {
  field: String
  order: SortOrder
}

enum SortOrder {
  ascend
  descend
  none
}

type Estate {
    
    immowebCode:        Int!

    description:        String
    images:             [String]

    price:              Int
    priceHistory:       [PriceHistory]

    geolocation:        [Float]
    zipCode:            Int
    locality:           String
    street:             String
    streetNumber:       String
    
    bedroomCount:       Int
    hasGarden:          Boolean
    gardenArea:         Int
    livingArea:         Int

    creationDate:       Date!
    modificationDate:   Date!
    disappearanceDate:  Date    

    isAuction:          Boolean
    isSold:             Boolean
    isUnderOption:      Boolean

    agencyName:         String
    agencyLogo:         String    
    
    isLiked:            Boolean

}

type PriceHistory {
    date:   Date!
    price:  Int
}

type User {
    name:           String!
    likedEstates:   [Estate]
    visitedEstates: [Estate]
}

type Mutation {

    register(name: String!, password: String!): User
    login(name: String!, password: String!): String

    markAsLiked(
        immowebCode: Int!
        isLiked: Boolean
    ): Boolean

}